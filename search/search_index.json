{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#what-is-this","title":"What is this","text":"<p>txtdot is a proxy that requests the page by the given URL, extracts only useful data including text, links, pictures and tables, and returns it as an HTML page with a minimalistic design optimized for text reading.</p> <p>txtdot increases the loading speed and reduces client's bandwidth usage since no unnecessary code and no scripts are transferred. Also, you won't see any advertisement (unless it's a static picture that is hard to detect as ads). There are no trackers too.</p>"},{"location":"#how-to-use-it","title":"How to use it","text":"<p>txtdot is an open source software, so everyone can host it on his own server. The official instance is txt.dc09.ru, the list of all instances is here.</p> <p>On the main page, there's a handy form where you can specify a URL, choose an engine and a format for parsed data. On the <code>/get</code> page, \"Home\" button returns you to <code>/</code>, \"Original page\" opens the entered URL in the same window without txtdot proxy.</p> <p>The latest docs for API endpoints can be found here. For handy JSON API, use <code>/api/parse</code> returning an engine result object (see below). For pure HTML response, use <code>/api/raw-html</code>. Note that both API and browser endpoints on txt.dc09.ru are ratelimited to 2 requests per second.</p>"},{"location":"#how-it-works","title":"How it works","text":"<p>This project exists thanks to great Mozilla's Readability.js library. The initial idea was to process HTML with it on the server so the client does not need to download and execute heavy JS, doesn't need to use an adblock.</p> <p>Readability performs its work very well in most cases. But not always. For example, check any StackOverflow page or Google search results.</p> <p>So artegoser wrote the basis of the code keeping in mind that we'll extend txtdot with other engines. For now, engines are functions taking a URL as a parameter, returning an object that contains extracted HTML and plain text, page title and language. The object is rendered with ejs template (or, in <code>/api/parse</code>, just sent as JSON).</p> <p>If an <code>?engine=</code> parameter wasn't passed, but txtdot found that a specific engine is assigned to the requested domain, for example, <code>\"stackoverflow.com\": stackoverflow</code>, it uses that engine to process the URL. Otherwise, the page is parsed with the engine assigned to <code>*</code> (it's Readability).</p>"},{"location":"selfhost/","title":"Self-Hosting","text":""},{"location":"selfhost/#without-docker","title":"Without Docker","text":"<p>Install Node and NPM:</p> <pre><code># Debian, Ubuntu\nsudo apt install nodejs npm\n# CentOS\nsudo yum install nodejs\n# Arch\nsudo pacman -S nodejs npm\n# Alpine\ndoas apk add nodejs npm\n</code></pre> <p>Create a user for txtdot, log in:</p> <pre><code># Not Alpine (coreutils)\nsudo useradd -r -m -s /sbin/nologin -U txtdot\nsudo -u txtdot -i\n\n# Alpine (busybox)\ndoas addgroup -S txtdot\ndoas adduser -h /home/txtdot -s /sbin/nologin -G txtdot -S -D txtdot\ndoas -u txtdot bash\n</code></pre> <p>Clone the repo: </p> <pre><code>git clone https://github.com/txtdot/txtdot.git src\n</code></pre> <p>Install packages, compile TS:</p> <pre><code>cd src\nnpm install\nnpm run build\n</code></pre> <p>Manually start the server to check if it works (Ctrl+C to exit):</p> <pre><code>npm run start\n</code></pre> <p>Log out from txtdot account: <code>exit</code></p>"},{"location":"selfhost/#add-txtdot-to-autostart","title":"Add txtdot to autostart","text":"<p>Either using systemd unit file:</p> <pre><code>wget https://github.com/TxtDot/txtdot/blob/main/txtdot.service\nsudo chown root:root txtdot.service\nsudo chmod 755 txtdot.service\nsudo mv txtdot.service /etc/systemd/system/\nsudo systemctl daemon-reload\nsudo systemctl enable txtdot\nsudo systemctl start txtdot\n</code></pre> <p>Or using OpenRC script:</p> <pre><code>wget -O txtdot https://github.com/TxtDot/txtdot/blob/main/txtdot.init\ndoas chown root:root txtdot\ndoas chmod 755 txtdot\ndoas mv txtdot /etc/init.d/\ndoas rc-update add txtdot\ndoas rc-service txtdot start\n</code></pre> <p>Or using crontab:</p> <pre><code>sudo crontab -u txtdot -e\n# The command will open an editor\n# Add this line to the end of the file:\n@reboot sleep 10 &amp;&amp; cd /home/txtdot/src &amp;&amp; npm run start\n# Save the file and exit\n</code></pre>"},{"location":"selfhost/#with-docker","title":"With Docker","text":"<p>Docker Engine and Docker Compose are required.</p> <p>Note that built images are not provided via Docker Hub. If you can't or don't want to build them on your server and don't want to setup a CI/CD system, let us know, we'll consider setting up a GitHub Actions workflow.</p> <pre><code>git clone https://github.com/txtdot/txtdot.git\ncd txtdot\ndocker compose build\ndocker compose up -d\n</code></pre>"}]}